Expansion

Typing a command and pressing enter causes bash to perform several process on the text before it carries out your command. Theses processes are called expansion; you enter something, and it is expanded into something else before the shell acts upon it:

	[bernie@antergos_vb bhelp]$ echo *
	commands shell_redirection vim_commands wildcards

Here echo doesn't just print the wildcard *. Instead * is expanded into something else, in this case a list of files in the directory before echo is executed. In fact the echo command never saw *, just the expanded result. Wildcards work through pathname expansion. We can use them to generate text and file lists:

	[bernie@antergos_vb bhelp]$ ls -d .[!.]?*
	.shell_expansion.swp

Tilde expansion:
	[bernie@antergos_vb bhelp]$ echo ~
	/home/bernie

Arithmetic expansion
	[bernie@antergos_vb bhelp]$ echo $((2 + 2))
	4
Spaces are not significant and expansions can be nested. Nested expressions may use just one set of parentheses:
	[bernie@antergos_vb bhelp]$ echo $(((5*5) ** 2))
	625

Brace expansion
With brace expansion we can create multiple text strings from a pattern containing braces:
	[bernie@antergos_vb bhelp]$ echo Hello-{Tim,Sarah,Alan}
	Hello-Tim Hello-Sarah Hello-Alan
Ranges may be specified using periods:
	[bernie@antergos_vb bhelp]$ echo Hello-{A..E}
	Hello-A Hello-B Hello-C Hello-D Hello-E
And brace expansions may be nested:
	[bernie@antergos_vb bhelp]$ echo Hello-{{Mr-,Mrs-}Smith,{Mr-,Mrs-}Atkin}
	Hello-Mr-Smith Hello-Mrs-Smith Hello-Mr-Atkin Hello-Mrs-Atkin

Parameter expansion
The primary use of this is the expansion of variables to get their values:
	[bernie@antergos_vb bhelp]$ echo $HOSTNAME
	antergos_vb
Or we can create our own variables:
	[bernie@antergos_vb bhelp]$ MYVARIABLE=HelloThere
	[bernie@antergos_vb bhelp]$ echo $MYVARIABLE
	HelloThere

History expansion
!!			repeat the last command
!number		repeat history list number
!string 	repeat history list item starting with string (careful!)
!?string	repeat history list item containing string (careful!)

Command substitution
This allows the use of the output command as an expansion:
	[bernie@antergos_vb bhelp]$ echo $(ls)
	commands shell_redirection vim_commands wildcards
Or
	[bernie@antergos_vb bhelp]$ ls -l $(which cp)
	-rwxr-xr-x 1 root root 121992 Mar 12 14:09 /usr/bin/cp
Or for an entire pipeline:
	[bernie@antergos_vb bhelp]$ file $(ls /usr/bin/* | grep bunzip)
	/usr/bin/bunzip2: symbolic link to bzip2

Pattern substitution

	${parameter/pattern/string}

	The pattern is expanded to produce a pattern just as in pathname expansion. Parameter is expanded and the longest match of pattern against its value is replace with the string. ONLY FIRST MATCH unless you being the patter with /:

	${parameter//pattern/string}
	
	All matches replaced. This can modify the replacement behaviour:

Pattern beings with:
/						All matches replaced
#						Pattern must match the beginning of the expanded value of the parameter
%						Pattern must match the end of the expanded value of the parameter

	If the parameter value is @ or *, i.e. an array: ${array[@]} then the substitution operation is applied to each positional parameter in turn and the expansion is the resultant list/array
