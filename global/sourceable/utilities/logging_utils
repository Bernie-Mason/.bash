#!/bin/bash

LAST_ERROR_MESSAGE=""
TITLE_COUNT=0
SUB_TITLE_COUNT=0
INDENTATION=1
# Colours from env

log-info() {
    echo -e "${IBlue}$(printf ' %.0s' $(seq 1 $INDENTATION))INFO :${Color_Off} $1"
}

log-warn() {
    echo -e "${Yellow}$(printf ' %.0s' $(seq 1 $INDENTATION))WARN :${Color_Off} $1"
}

log-error() {
    LAST_ERROR_MESSAGE="$1"
    SHOULD_EXIT=${2:-false}
    echo -e "${Red}$(printf ' %.0s' $(seq 1 $INDENTATION))ERROR:${Color_Off} $1" >&2
    if [[ $SHOULD_EXIT == true ]]; then
        exit 1
    fi
}

log-success() {
    echo -e "${Green}$(printf ' %.0s' $(seq 1 $INDENTATION))SUCCESS:${Color_Off} $1"
}

get-last-error() {
    if [[ $1 == "format" ]]; then
      echo -e "${Red}$(printf ' %.0s' $(seq 1 $INDENTATION))ERROR:${Color_Off} $LAST_ERROR_MESSAGE"
    else
      echo "$LAST_ERROR_MESSAGE"
    fi
}

function say() {
	echo -e "$@" >&2
}

function die() {
  test -z "$2" || say "${Red}>> $2"
  exit "$1"
}

function title() {
  if [[ $2 == "reset-count" ]]; then
    TITLE_COUNT=0
    SUB_TITLE_COUNT=0
  fi

  INDENTATION=1
  TITLE_COUNT=$((TITLE_COUNT + 1))
  echo -e "${IGreen}$(printf ' %.0s' $(seq 1 $INDENTATION))$TITLE_COUNT - $1${Color_Off}" #\033[93;100m - \033[95;100;1m
  ## When printing a title we wish to set the indentation to 2 spaces. All logging functions should respect this.
  INDENTATION=3
  ## We also reset the sub title count
  SUB_TITLE_COUNT=0
}

function subtitle() {
  INDENTATION=3
  echo -e "${Green}$(printf ' %.0s' $(seq 1 $INDENTATION))$TITLE_COUNT.$SUB_TITLE_COUNT - $1${Color_Off}"
  SUB_TITLE_COUNT=$((SUB_TITLE_COUNT + 1))
  INDENTATION=5
}

function read-user-input() {
    local prompt="$1"
    local input
    local -a valid_options=()
    if [[ -n "$2" ]]; then
        # If a second argument is provided, treat it as the name of an array variable
        declare -n options_ref="$2"
        valid_options=("${options_ref[@]}")
    fi

    while true; do
        printf "${IYellow}$prompt${Color_Off} " >&2
        read input
        if [[ ${#valid_options[@]} -eq 0 ]]; then
            echo "$input"
            return
        else
            for option in "${valid_options[@]}"; do
                if [[ "$input" == "$option" ]]; then
                    echo "$input"
                    return
                fi
            done
            # If we reach here, input was not valid; re-prompt
        fi
    done
}

function read-user-choice() {
    local prompt="$1"
    local -a options=()
    local input

    # Get the options array by name
    declare -n options_ref="$2"
    options=("${options_ref[@]}")

    # Print the numbered list
    echo -e "${IYellow}$prompt${Color_Off}" >&2 # Print prompt to stderr. Hack to avoid printing to stdout with interactive prompts
    for i in "${!options[@]}"; do
        printf "  %d)${Yellow} %s${Color_Off}\n" "$((i+1))" "${options[$i]}" >&2
    done

    while true; do
        printf "Enter the number of your choice: " >&2
        read input
        if [[ "$input" =~ ^[0-9]+$ ]] && (( input >= 1 && input <= ${#options[@]} )); then
            echo "${options[$((input-1))]}"
            return
        fi
        # Invalid input, re-prompt
    done
}

function sample_colours() {
  ## Regiular colours
  echo -e "Regular colours"
  for i in $(seq 40 47); do
    for j in $(seq 30 37); do
      echo -e "\033[${i};${j}m Regular: ${i};${j} \033[0m  \033[${i};${j};1m Bold: ${i};${j} \033[0m  \033[${i};${j};4m Underline: ${i};${j} \033[0m"
      echo -e ""
    done
  done

  echo -e "High Intensity colours"
  for i in $(seq 100 107); do
    for j in $(seq 90 97); do
      echo -e "\033[${i};${j}m High Intensity: ${i};${j} \033[0m  \033[${i};${j};1m Bold: ${i};${j} \033[0m"
      echo -e ""
    done
  done
}