#!/bin/bash
# 
# git unique log tool
#
# Finds a branch in git based on a unique identifier and outputs the log for that branch between its tip and master.
# If more than one match is found, the tool provides a list of options that may be selected.
#
# By default the script only searches local branches. However it can also search remotes by 
# providing the all action.

function say() {
	echo "$@" >&2
}

function die() {
	test -z "$2" || say "$2"
	exit "$1"
}

function echo_help() {
	echo "Log printing tool between a specified branch and your remote master branch"
	echo "First argument should be your unique identifier for the branch in question."
	echo "If you provide no argument, it will show the log between your HEAD commit and master"
    echo " "
    echo "\$glogu identifier [actions]"
    echo " "
    echo "actions:"
    echo "-h, --help           show brief help"
    echo "-a, --all            select all branches (including remotes)"
    echo "-r, --remote-master  show log between remote master (e.g. origin/master"
    die 0
}

UNIQUE_ID="$1"
GIT_REMOTE="$(git remote)/"

GIT_BRANCH_ACTIONS="--list"

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo_help
      ;;
    -a|--all)
      GIT_BRANCH_ACTIONS="--all"
      shift
      ;;
    -r|--remote-master)
      GIT_REMOTE=""
      shift
      ;;
    *)
	  shift
      continue
      ;;
  esac
done

if [ -z "$UNIQUE_ID" ]; then 
  	git log --oneline ${GIT_REMOTE}master..HEAD
	die 0
fi

MATCHING_BRANCH=$(git branch ${GIT_BRANCH_ACTIONS} | grep ${UNIQUE_ID} | sed 's/\*//g' )
BRANCHES=($MATCHING_BRANCH)
MATCHCOUNT="${#BRANCHES[@]}"
echo ""

if (("${MATCHCOUNT}" == 1)); then
	git log --oneline ${GIT_REMOTE}master..$MATCHING_BRANCH
	die 0
fi

if (("$MATCHCOUNT" > 1)); then
	echo "More than one match. Select the one you want e.g. type \"1\" to git log the first item in the list:"
	echo "-------------------------------------------------------------------------------"
	echo ""
	i=1
	for BRANCH in ${BRANCHES[@]}; do
		echo "	$i  $BRANCH"
		((++i))
	done
	echo ""
	re='^[0-9]+$'
	read SELECTED_NUMBER
	echo "Value read in: ($SELECTED_BRANCH)"
	if ! [[ $SELECTED_NUMBER =~ $re ]]; then
		die 1 "Not a valid option. Exiting..."
	fi
	SELECTED_BRANCH=${BRANCHES[$((--SELECTED_NUMBER))]}
	echo "You have selected $SELECTED_BRANCH"
	git log --oneline ${GIT_REMOTE}master..$SELECTED_BRANCH
	die 0
fi


die 1 "No matching branches. Exiting..."
