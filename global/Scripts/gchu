#!/bin/bash
# 
# git checkout tool
#
# Checks out a branch based on a provided pattern.
# If more than one match is found, the tool provides a list of options that may be selected.
#
# By default the script only searches local branches. However it can also search remotes by 
# providing the all or remotes action.
#
# No external dependencies (env variables or scripts)

function say() {
	echo -e "$@" >&2
}

function die() {
	test -z "$2" || say "$2"
	exit "$1"
}

function fetchForRemotes() {
      echo -e "$1 selected as checkout candidates, performing a git fetch to ensure branch list is up-to-date."
      git fetch
}

function print_help() {
  echo -e "${UWhite}Checkout a branch with a identifier.${NC}"
  echo -e "First argument should be your string pattern for the branch in question. Supports grep operations."
    echo -e " "
    echo "\$gchu identifier [actions]"
    echo -e " "
    echo -e "actions:"
    echo -e "-h, --help        ${Yellow}show brief help${NC}"
    echo -e "-r, --remotes     ${Yellow}select from just remote branches (will fetch first)${NC}"
    echo -e "-a, --all         ${Yellow}select from local and remote branches (will fetch first)${NC}"
    echo -e "-t, --track       ${Yellow}track selected branch${NC}"
    die 0
}

PATTERN="$1"
test -z $PATTERN && print_help
GIT_BRANCH_ACTIONS="--list"
GIT_CHECKOUT_ACTIONS=""
GIT_REFS="branch"

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      print_help
      ;;
    -a|--all)
      fetchForRemotes "All branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --all"
      shift
      ;;
  	-r|--remotes)
      fetchForRemotes "Remote branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes"
      shift
      ;;
  	-t|--track)
      GIT_CHECKOUT_ACTIONS=" --track"
      shift
      ;;
    -g|--tags)
      fetchForRemotes "Tags"
      GIT_REFS="tag"
      shift
      ;;
    -tr|-rt)
      fetchForRemotes "Remote branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes"
      GIT_CHECKOUT_ACTIONS=" --track"
      shift
      ;;
    *)
	  shift
      continue
      ;;
  esac
done

MATCHING_BRANCH=$(git $GIT_REFS $GIT_BRANCH_ACTIONS | grep $PATTERN | sed -E 's/\* (\(HEAD detached at )?//g' )
BRANCHES=($MATCHING_BRANCH)
MATCHCOUNT="${#BRANCHES[@]}"
echo ""

test $MATCHCOUNT -eq 0 && die 1 "${Red}No matching ${GIT_REFS} in the repository ${NC}\"$(basename `git rev-parse --show-toplevel`)\"${Red}  ${NC}\"${PATTERN}\"${Red} Exiting...${NC}"

if (($MATCHCOUNT > 1)); then
	echo -e "${UYellow}More than one match. Select the one you want. E.g. type \"1\" to checkout the first item in the list:${NC}"
	echo ""
	i=1
	for BRANCH in ${BRANCHES[@]}; do
		echo -e "  $((i++))  $BRANCH"
	done
	echo ""
	re='^[0-9]+$'
	read SELECTED_NUMBER
	echo -e "Value read in: ($SELECTED_NUMBER)"
	if ! [[ $SELECTED_NUMBER =~ $re ]]; then
		die 1 "${BRed}Not a valid option. Exiting...${NC}"
	fi
	MATCHING_BRANCH=${BRANCHES[$((--SELECTED_NUMBER))]}
	echo -e "${Green}You have selected:${NC} \"$MATCHING_BRANCH\""
fi

git checkout$GIT_CHECKOUT_ACTIONS $MATCHING_BRANCH