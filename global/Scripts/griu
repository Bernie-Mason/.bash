#!/bin/bash
# 
# pattern based git rebase tool
#
# Rebases onto a branch based on a provided pattern.
# If more than one match is found, the tool provides a list of options that may be selected.
#
# By default the script only searches local branches. However it can also search remotes by 
# providing the all action.
#
# No external dependencies (env variables or scripts)

function say() {
	echo "$@" >&2
}

function die() {
	test -z "$2" || say "$2"
	exit "$1"
}

function fetchForRemotes() {
      echo "$1 branches selected as checkout candidates, performing a git fetch to ensure branch list is up-to-date."
      git fetch
}

function rebaseBranchOntoMaster() {
    echo "Rebasing $1 branch onto origin/master."
    $2 && echo "Fetching to rebase onto latest origin/master."
    $2 && git fetch

		git checkout $1
		git rebase -i origin/master;
		git checkout -
}

function echo_help() {
	echo "Rebase current branch onto target branch with a identifier."
	echo "First argument should be your string pattern for target branch in question. Supports grep operations."
    echo " "
    echo "\$griu identifier [actions]"
    echo " "
    echo "actions:"
    echo "-h, --help        show brief help"
    echo "-u, --update      rebase target branch onto master first"
    echo "-r, --remotes     select from just remote branches (will fetch first)"
    echo "-a, --all         select from local and remote branches (will fetch first)"
    die 0
}

PATTERN="$1"
test -z "$PATTERN" && echo_help
GIT_BRANCH_ACTIONS="--list"
REBASE_TARGET_FIRST=false

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo_help
      ;;
    -a|--all)
      fetchForRemotes "All"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --all"
      shift
      ;;
  	-r|--remotes)
      fetchForRemotes "Remote"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes"
      shift
      ;;
    -u|--update)
      REBASE_TARGET_FIRST=true
      shift
      ;;
    *)
	  shift
      continue
      ;;
  esac
done

MATCHING_BRANCH=$(git branch $GIT_BRANCH_ACTIONS | grep $PATTERN | sed -E 's/\* (\(HEAD detached at )?//g' )
BRANCHES=($MATCHING_BRANCH)
MATCHCOUNT="${#BRANCHES[@]}"
echo ""

test $MATCHCOUNT -eq 0 && die 1 "No matching branches. Exiting..."

if (($MATCHCOUNT > 1)); then
	echo "More than one match. Select the one you want e.g. type \"1\" to rebase onto the first item in the list:"
	echo "-------------------------------------------------------------------------------"
	echo ""
	i=1
	for BRANCH in ${BRANCHES[@]}; do
		echo "  $((i++))  $BRANCH"
	done
	echo ""
	re='^[0-9]+$'
	read SELECTED_NUMBER
	echo "Value read in: ($SELECTED_NUMBER)"
	if ! [[ $SELECTED_NUMBER =~ $re ]]; then
		die 1 "Not a valid option. Exiting..."
	fi
	MATCHING_BRANCH=${BRANCHES[$((--SELECTED_NUMBER))]}	
	echo "You have selected $MATCHING_BRANCH"
fi

$REBASE_TARGET_FIRST && rebaseBranchOntoMaster $MATCHING_BRANCH true

git rebase -i $MATCHING_BRANCH