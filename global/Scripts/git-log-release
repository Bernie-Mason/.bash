#!/bin/bash
#
# Script to output the ticket list for a particular Grid release
#
# Assumption. All tickets have a merge commit which also contains the ticket name (and thus the case ID)
# Input
# 1 => The tip of the branch (or tag) corresponding to the starting point. E.g. release/3.0.1.0.
# 2 => The tip of the branch (tag) corresponding to the end point. e.g. release/3.0.2.0. Can also specific HEAD.
#
# Output
# A list of of branches in between the first and last commit
#
# Example(s):
# To see the work in a release before it is initially tagged/released
# $ git-log-release Grid_3.0.60.0 HEAD
# To see the total progress of a release that has been branched
# $ git-log-release Grid_3.0.60.0 origin/release/3.0.61 


function say() {
	echo "$@" >&2
}

function die() {
	test -z "$2" || say "$2"
	exit "$1"
}

function echo_help() {
	echo "Log of issues in a release"
	echo "Basic wrapper for \"git log first_commit..second_commit\" including some tidy up of the output"
    echo " "
    echo "actions:"
    echo "-h, --help        show brief help"
    echo "-p, --pretty      attempt to trim the output to just show the branch name after the branch type identifier (works best for merge commit messages)"
    die 0
}

test -z $1 && die 1 "Please provide the oldest commit as your first argument"
test -z $2 && die 1 "Please provide the newest commit as your second argument"

FIRST_COMMIT="$1"
SECOND_COMMIT="$2"
PRETTY=false

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo_help
      ;;
    -p|--pretty)
	  PRETTY=true;
	  shift
      ;;
    *)
	  shift
      continue
      ;;
  esac
done

[[ $(git cat-file -t ${FIRST_COMMIT}) == "commit" ]] || die 1 "${FIRST_COMMIT} is not a valid commit"
[[ $(git cat-file -t ${SECOND_COMMIT}) == "commit" ]] || die 1 "${SECOND_COMMIT} is not a valid commit"

if ${PRETTY}; then
	git log $FIRST_COMMIT..$SECOND_COMMIT --pretty=format:"%s" --merges | cut -d " " -f 8 | cut -d "/" -f 2 
else
	git log $FIRST_COMMIT..$SECOND_COMMIT --pretty=format:"%s" --merges
fi
