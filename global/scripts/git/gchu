#!/bin/bash
# 
# pattern based git checkout tool
#
# Checks out a branch based on a provided regex.
# If more than one match is found, the tool provides a list of options that may be selected.
#
# By default the script only searches local branches. However it can also search remotes by 
# providing the all or remotes action.
#
# Depends on formatBranches script

NC='\033[0m'              # Text Reset
Red='\033[0;31m'
Green='\033[0;32m'
Yellow='\033[0;33m'
UWhite='\033[4;37m'
Black='\033[0;30m'

source $logging_utils_path

function fetchForRemotes() {
      say -e "$1 selected as checkout candidates, performing a git fetch to ensure branch list is up-to-date."
      git fetch
}

function print_help() {
  echo -e "${UWhite}Checkout a branch based on an identifier.${NC}"
  echo -e "First argument should be your string pattern for the branch in question. Supports grep operations."
    echo -e " "
    echo "\$gchu identifier [actions]"
    echo -e " "
    echo -e "actions:"
    echo -e "-h, --help        ${Yellow}show brief help${NC}"
    echo -e "-r, --remotes     ${Yellow}select from just remote branches (will fetch first)${NC}"
    echo -e "-a, --all         ${Yellow}select from local and remote branches (will fetch first)${NC}"
    echo -e "-t, --track       ${Yellow}track selected branch${NC}"
    echo -e "-s, --strict      ${Yellow}Do not look in remote/locals if match is not found${NC}"
    echo -e "-g, --tags        ${Yellow}tag to checkout${NC}"
    echo -e "-b, --rainbow     ${Yellow}RAINBOW OUTPUT MODE${NC}"
    die 0
}


PATTERN="$1"
test -z $PATTERN && print_help
GIT_BRANCH_ACTIONS="--list"
GIT_CHECKOUT_ACTIONS=""
GIT_REF="branch"
WILL_TRACK=false
STRICT=false
REMOTES=false
RAINBOW_OUTPUT=false;
DEBUG=false;

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      print_help
      ;;
    -d|--debug)
      DEBUG=true;
      shift
      ;;
    -a|--all)
      fetchForRemotes "All branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --all"
      shift
      ;;
  	-r|--remotes)
      fetchForRemotes "Remote branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes"
      REMOTES=true;
      shift
      ;;
  	-t|--track)
      GIT_CHECKOUT_ACTIONS=" --track"
      WILL_TRACK=true;
      shift
      ;;
    -s|--strict)
      STRICT=true;
      shift
      ;;
    -b|--rainbow)
      RAINBOW_OUTPUT=true;
      shift
      ;;
    -g|--tags)
      fetchForRemotes "Tags"
      GIT_REF="tag"
      shift
      ;;
    -tr|-rt)
      fetchForRemotes "Remote branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes"
      GIT_CHECKOUT_ACTIONS=" --track"
      REMOTES=true;
      WILL_TRACK=true;
      shift
      ;;
    -str|-srt|-rts|-rst|-trs|-tsr)
      fetchForRemotes "Remote branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes"
      GIT_CHECKOUT_ACTIONS=" --track"
      STRICT=true;
      REMOTES=true;
      WILL_TRACK=true;
      shift
      ;;
    -at|-at)
      fetchForRemotes "Remote branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --all"
      GIT_CHECKOUT_ACTIONS=" --track"
      WILL_TRACK=true;
      REMOTES=true;
      shift
      ;;
    *)
  	  shift
      continue
      ;;
  esac
done

$DEBUG && log-info "Debug output"
log-info "Finding \"$GIT_REF\" matching the pattern \"${PATTERN}\""

# Check if we are in a git repository
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  log-error "gchu FATAL: Not a git repository" true
fi

MATCHING_BRANCH=$(git $GIT_REF $GIT_BRANCH_ACTIONS | grep -i $PATTERN | sed -E 's/\* (\(HEAD detached at )?//g' )
BRANCHES=($MATCHING_BRANCH)
MATCHCOUNT="${#BRANCHES[@]}"
$DEBUG && log-info "Match count: $MATCHCOUNT"

if [[ $MATCHCOUNT -eq 0 ]]; then
  if ! $STRICT; then
    if ! $REMOTES; then
        log-info "Failed to find local branch. Would you like to search the remotes with the same pattern?"
        read -p "Enter y/Y or anything else to exit: " search_remotes
        case "$search_remotes" in
            [yY]*) 
                GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes --strict --track"
                gchu $PATTERN $GIT_BRANCH_ACTIONS
                die $?
                ;;
            *) log-error "${Red}No matching ${GIT_REF} in the repository ${NC}\"$(basename `git rev-parse --show-toplevel`)\"${Red} for the pattern: ${NC}\"${PATTERN}\"${Red} Exiting...${NC}" true;; 
        esac
    else
        log-info "Failed to find remote branch. Would you like to search the local branches with the same pattern?"
        read -p "Enter y/Y or anything else to exit: " search_remotes
        case "$search_remotes" in
            [yY]*) 
                gchu $PATTERN -s
                die $?
                ;;
            *) log-error "${Red}No matching ${GIT_REF} in the repository ${NC}\"$(basename `git rev-parse --show-toplevel`)\"${Red} for the pattern: ${NC}\"${PATTERN}\"${Red} Exiting...${NC}" true;; 
        esac
    fi
  else
    log-warn "No matching ${GIT_REF} in the repository \"$(basename `git rev-parse --show-toplevel`)\" for the pattern: \"${PATTERN}\" Exiting..." true
    exit 0
  fi
fi

if (($MATCHCOUNT > 1)); then
  echo -e "${Green}More than one match. Select the one you want. E.g. type \"1\" to checkout the first item in the list:${NC}"

  # Modern replacement for custom formatBranches script
  # choice=$(read-user-choice "Please select a ${GIT_REF} to checkout:" BRANCHES)

  formatBranches $RAINBOW_OUTPUT "${BRANCHES[@]}"

  echo ""
  re="^[0-9]+$"
  read -p "Enter number {1-$MATCHCOUNT}: " SELECTED_NUMBER
  log-info "Value read in: \"$SELECTED_NUMBER\""
  if ! [[ $SELECTED_NUMBER =~ $re ]]; then
  	  log-error "Not a valid option. Exiting..." true
  fi
  if (( $SELECTED_NUMBER < 1 || $SELECTED_NUMBER > $MATCHCOUNT )); then
      log-error "\"$SELECTED_NUMBER\" is of bounds. exiting..." true
  fi

  MATCHING_BRANCH=${BRANCHES[$((--SELECTED_NUMBER))]}
  log-info "The selected ${GIT_REF} is: \"$MATCHING_BRANCH\""
fi

log-info "Checking out ${MATCHING_BRANCH}"

if $WILL_TRACK; then
  log-info "Tracking selected. Checking for an existing local branch..."
  local_match=$(git branch -vv | grep ${MATCHING_BRANCH} | grep -Eo "[[:alnum:]]+\/[^ ]*" | head -1)
  if [[ ! -z $local_match ]]; then
    log-info "Local branch \"${local_match}\" exists for remote: \"${MATCHING_BRANCH}\""
    git checkout --quiet $local_match
    die 0
  fi
fi

if $DEBUG; then
  GIT_TRACE=1 git checkout$GIT_CHECKOUT_ACTIONS --quiet $MATCHING_BRANCH
else
  git checkout$GIT_CHECKOUT_ACTIONS --quiet $MATCHING_BRANCH
fi

if [[ $? == 128 && $WILL_TRACK ]]; then
    log-info "Tracking of remote failed due to branch already existing. Checking out local branch"
    git checkout $MATCHING_BRANCH
fi

if [[ $? != 0 ]]; then
   log-warn "Failed to checkout with git checkout$GIT_CHECKOUT_ACTIONS $MATCHING_BRANCH with code $?"
else
   log-success "Successfully checked out ${GIT_REF} \"${MATCHING_BRANCH}\""
fi