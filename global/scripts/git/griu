#!/bin/bash
# 
# pattern based git rebase tool
#
# Rebases onto a branch based on a provided pattern.
# If more than one match is found, the tool provides a list of options that may be selected.
#
# By default the script only searches local branches. However it can also search remotes by 
# providing the all action.
#
# Depends on formatBrformat-branchesanches script

NC='\033[0m'              # Text Reset
Red='\033[0;31m'
Green='\033[0;32m'
Yellow='\033[0;33m'
UWhite='\033[4;37m'
Black='\033[0;30m'

source $logging_utils_path

function fetchForRemotes() {
      echo "$1 selected as checkout candidates, performing a git fetch to ensure branch list is up-to-date."
      git fetch
}

function rebaseBranchOntoMaster() {
    title "Rebasing $1 branch onto origin/master."
    $2 && echo "Fetching to rebase onto latest origin/master."
    $2 && git fetch

		git checkout $1
		git rebase -i origin/master;
		git checkout -
}

function echo_help() {
	echo -e "${UWhite}Rebase current branch onto target branch with a identifier.${NC}"
	echo -e "First argument should be your string pattern for target branch in question. Supports grep operations."
    echo -e " "
    echo -e "\$griu identifier [actions]"
    echo -e " "
    echo -e "actions:"
    echo -e "-h, --help        ${Yellow}show brief help${NC}"
    echo -e "-u, --update      ${Yellow}rebase target branch onto master first${NC}"
    echo -e "-r, --remotes     ${Yellow}select from just remote branches (will fetch first)${NC}"
    echo -e "-a, --all         ${Yellow}select from local and remote branches (will fetch first)${NC}"
    echo -e "-g, --tags        ${Yellow}tag to checkout${NC}"
    die 0
}

PATTERN="$1"
test -z "$PATTERN" && echo_help
GIT_BRANCH_ACTIONS="--list"
REBASE_TARGET_FIRST=false
RAINBOW_OUTPUT=false
GIT_REF="branch"
DEBUG=false;

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo_help
      ;;
    -d|--debug)
      DEBUG=true;
      shift
      ;;
    -a|--all)
      fetchForRemotes "All branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --all"
      shift
      ;;
  	-r|--remotes)
      fetchForRemotes "Remote branches"
      GIT_BRANCH_ACTIONS="${GIT_BRANCH_ACTIONS} --remotes"
      shift
      ;;
    -u|--update)
      REBASE_TARGET_FIRST=true
      shift
      ;;
    -g|--tags)
      fetchForRemotes "Tags"
      GIT_REF="tag"
      shift
      ;;
    -b|--rainbow)
      RAINBOW_OUTPUT=true;
      shift
      ;;
    *)
	  shift
      continue
      ;;
  esac
done

$DEBUG && echo "Debug output"
title "Finding \"$GIT_REF\" matching the pattern \"${PATTERN}\""
MATCHING_BRANCH=$(git $GIT_REF $GIT_BRANCH_ACTIONS | grep -i $PATTERN | sed -E 's/\* (\(HEAD detached at )?//g' )
BRANCHES=($MATCHING_BRANCH)
MATCHCOUNT="${#BRANCHES[@]}"
$DEBUG && echo "Match count: $MATCHCOUNT"

test $MATCHCOUNT -eq 0 && die 1 "${Red}No matching ${GIT_REF} in the repository ${NC}\"$(basename `git rev-parse --show-toplevel`)\"${Red}  ${NC}\"${PATTERN}\"${Red} Exiting...${NC}"

if (($MATCHCOUNT > 1)); then
  title "More than one match. Select the one you want. E.g. type \"1\" to checkout the first item in the list:"

  format-branches $RAINBOW_OUTPUT "${BRANCHES[@]}"

  echo ""
  re="^[0-9]+$"
  read -p "Enter number {1-$MATCHCOUNT}: " SELECTED_NUMBER
  echo -e "Value read in: \"$SELECTED_NUMBER\""
  if ! [[ $SELECTED_NUMBER =~ $re ]]; then
      die 1 "${Red}Not a valid option. Exiting...${NC}"
  fi
  if (( $SELECTED_NUMBER < 1 || $SELECTED_NUMBER > $MATCHCOUNT )); then
      die 1 "\"$SELECTED_NUMBER\" ${Red}is of bounds. exiting...${NC}"
  fi
  MATCHING_BRANCH=${BRANCHES[$((--SELECTED_NUMBER))]}
  echo -e "${Yellow}The selected ${GIT_REF} is:${NC} \"$MATCHING_BRANCH\""
fi


$REBASE_TARGET_FIRST && rebaseBranchOntoMaster $MATCHING_BRANCH true

title "Rebasing onto ${MATCHING_BRANCH}"

git rebase -i $MATCHING_BRANCH