#!/bin/bash
# copy all symbol files that we might need into the output directory. Neither VS nor Rider can apparently manage this. 
#
# Prerequisites
# Must define:
#	grid_repository_dir - e.g. /c/dev/grid
# 	nuget_global_packages - e.g. /C/Users/Bernie/.nuget/packages/
#

function say() {
	echo " - $@" >&2
}

function title() {
  echo ""
  echo "<--- $@ --->" >&2
}

function die() {
	test -z "$2" || say "$2"
	exit "$1"
}

function echo_help() {
	echo "Copy symbols from .nuget into Grid output."
    echo " "
    echo "actions:"
    echo "-h, --help        					           Show brief help"
    echo "-n, --no-copy        Don't copy, just show symbol package status"
    die 0
}

PACKAGE_CACHE=${nuget_global_packages}
NO_COPY=false

while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo_help
      ;;
    -n|--no-copy)
      NO_COPY=true
      shift
      ;;
    *)
	  shift
      continue
      ;;
  esac
done


# Cannot pass an array into a function otherwise this could be abstracted further
function copy-packages(){
	PACKAGE=$1
	VERSION=$2

	if [[ -z $VERSION ]]; then
		say "FAILED (${PACKAGE}): Version not found."
		return
	fi

	SEARCH_DIR="${PACKAGE_CACHE}${PACKAGE}/${VERSION}"
	if [[ ! -d  $SEARCH_DIR ]]; then
		say "FAILED (${PACKAGE}): Package directory not found: ${SEARCH_DIR}"
		return
	fi
	SHARED_PDB_FILE_PATH=$(find "${SEARCH_DIR}" -iname ${PACKAGE}.pdb)
	if [[ -f  $SHARED_PDB_FILE_PATH ]]; then
		if [ $NO_COPY = true ]; then
			echo "SUCCESS (NO_COPY): File exists at ${SHARED_PDB_FILE_PATH}"
		else
			cp ${SHARED_PDB_FILE_PATH} ${TARGET_BUILD_DIR} && say "SUCCESS (${PACKAGE}): Copied ${SHARED_PDB_FILE_PATH} to ${TARGET_BUILD_DIR}"
			cp ${SHARED_PDB_FILE_PATH} "/c/dev/symbols" && say "SUCCESS (${PACKAGE}): Copied ${SHARED_PDB_FILE_PATH} to /c/dev/symbols"
		fi
	else
		say "FAILED (${PACKAGE}): Package file doesn't exist at: ${SHARED_PDB_FILE_PATH}"
	fi
}

TARGET_BUILD_DIR="${grid_repository_dir}/Source/SensorySoftware.Grids.Grid3.Desktop/bin/x86/Debug/net45"
DIRECTORY_BUILD_PROPS="${grid_repository_dir}/Source/Directory.Build.Props"

[ ! -d  $TARGET_BUILD_DIR ] && die "FAILED: Target build directory - ${TARGET_BUILD_DIR} - does not exist. Please check that Grid has been built"
[ ! -f  $DIRECTORY_BUILD_PROPS ] && die "FAILED: ${DIRECTORY_BUILD_PROPS} does not exist. Please check that Grid has been built"


SHARED_VERSION=$(grep "SharedVersion>" $DIRECTORY_BUILD_PROPS | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(-beta)?" )
title "SHARED version is $SHARED_VERSION"

SHARED_PACKAGES=('sensorysoftware.shared' 'sensorysoftware.shared.desktop' 'sensorysoftware.shared.fluentui')
for PACKAGE in ${SHARED_PACKAGES[@]}; do
	copy-packages $PACKAGE $SHARED_VERSION 
done

# First grep the shit out of the directory.build.props file to get the versions of the packages we're using in the build
EYEGAZE_VERSION=$(grep "EyeGazeVersion>" $DIRECTORY_BUILD_PROPS | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(-beta)?" )
title "EYEGAZE version is $EYEGAZE_VERSION"

EYEGAZE_PACKAGES=('sensorysoftware.eyegaze' 'sensorysoftware.eyegaze.desktop')
for PACKAGE in ${EYEGAZE_PACKAGES[@]}; do
	copy-packages $PACKAGE $EYEGAZE_VERSION 
done

# CEFSHARP_VERSION=$(grep "CefSharpVersion>" $DIRECTORY_BUILD_PROPS | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(-beta)?" )
# title "CEFSHARP version is $CEFSHARP_VERSION"
GRIDPHONE_VERSION=$(grep "GridPhoneVersion>" $DIRECTORY_BUILD_PROPS | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(-beta)?" )
title "GRIDPHONE version is $GRIDPHONE_VERSION"

GRIDPHONE_PACKAGES=('sensorysoftware.gridphone')
for PACKAGE in ${GRIDPHONE_PACKAGES[@]}; do
	copy-packages $PACKAGE $GRIDPHONE_VERSION 
done

SPEECHLIB_VERSION=$(grep "SpeechLibVersion>" $DIRECTORY_BUILD_PROPS | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+(-beta)?" )
title "SPEECHLIB version is $SPEECHLIB_VERSION"

SPEECHLIB_PACKAGES=('sensorysoftware.speechlib')
for PACKAGE in ${SPEECHLIB_PACKAGES[@]}; do
	copy-packages $PACKAGE $SPEECHLIB_VERSION
done
