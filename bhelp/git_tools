git reset and git checkout

The three trees:
An esier way to think about reset and checkout is through the analogy of Git being a content manager of three different trees. By 'Tree' here we really mean "file collection", not specifically the data structure. There are a few cases where the index doesn't exactly act like a tree, but for our purposes it is easier to think about it this way for now.

Git as a system manages and manipulates three trees in its normal operation:

Tree 			Role
HEAD 			Last commit snapshot, next parent
Index	 		Proposed next commit snapshot
Working Directory 	Sandbox

The HEAD
HEAD is the pointer to the current branch reference, which is in turn a pointer to the last commit made on that branch. That measn HEAD will be the parent of the next commit that's created. It's generally simplest to think of HEAD as the snapshot of your last commit. We can easily see what this snapshot looks like!

$ git cat-file -p HEAD
tree 3ed792e509582942f6d83bdd9d5d210c428ebffc
parent afb6d9b5a3aa50c710fc78ee3f0cfc1305e0a27f
author Bernie Mason <bernie.mason@gmail.com> 1507653850 +0100
committer Bernie Mason <bernie.mason@gmail.com> 1507717363 +0100

wip - Fix rendering of indox when reviewer cleared

$ git ls-tree -r HEAD
...

The cat-file and ls-tree commands are "plumbing" commands that are used for lower level things and not really in day-to-day work, but they help us see what's going on here.

The Index
The Index is your proposed next commit. We've also been referring to this concept as Git's Staging Area as this is what Git looks at when you run git commit. Git populates this index with a list of all the file contents that were last checked out into your wd and what they looked like when they were originally checkout out. You then replace some of those files with new versions of them, and git commit converts that into the tree for a new commit.


